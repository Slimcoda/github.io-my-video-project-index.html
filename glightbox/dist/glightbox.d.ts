import { ApiEvent, GLightboxOptions, SlideConfig } from './types';
import { EventType } from '@glightbox/utils';
import { Plugin } from '@glightbox/plugin-core';

export default class GLightbox {
    options: GLightboxOptions;
    apiEvents: Set<ApiEvent>;
    events: Map<string, EventType>;
    state: Map<string, number | boolean | HTMLElement>;
    plugins: Map<string, Map<string, Plugin>>;
    items: Set<SlideConfig>;
    modal: HTMLElement | null;
    prevButton: HTMLButtonElement | null;
    nextButton: HTMLButtonElement | null;
    overlay: HTMLButtonElement | null;
    slidesContainer: HTMLElement | null;
    private observer;
    constructor(options?: Partial<GLightboxOptions>);
    private init;
    open(startAt: number | HTMLElement | undefined): void;
    prevSlide(): void;
    nextSlide(): void;
    goToSlide(index?: number): void;
    private showSlide;
    private setActiveSlideState;
    private preloadSlide;
    private build;
    close(): Promise<void>;
    destroy(): void;
    reload(): void;
    setItems(items: SlideConfig[]): void;
    private setItemsFromNode;
    getSettings(): GLightboxOptions;
    private getElementIndex;
    getActiveSlide(): HTMLElement | undefined;
    getActiveSlideIndex(): number;
    getTotalSlides(): number;
    getItems(): Set<SlideConfig>;
    updateNavigationButtons(): void;
    private setSlideError;
    private afterSlideLoaded;
    on(evt: string, callback: () => void, once?: boolean): void;
    once(evt: string, callback: () => void): void;
    protected trigger(eventName: string, data?: unknown): void;
    private parseConfigFromNode;
    private getRegisteredSlideType;
    private getSlideData;
    processVariables(node: HTMLElement): void;
    protected registerPlugin(plugin: Plugin): void;
    protected initPlugins(): void;
    protected runPluginsMethod(method: string): void;
    pluginsRunEach(callback: (plugin: Plugin) => void): void;
    protected injectCSS(css: string): void;
    injectAssets(urls: (string | string[] | {
        src: string;
        module?: boolean;
    })[]): Promise<void>;
    private clearAllEvents;
}
